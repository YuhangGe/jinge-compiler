{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"jQuery\"","webpack:///external \"echarts\"","webpack:////Users/geyuhang/jinge/jinge-framework/src/util/type.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/util/array.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/util/index.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/viewmodel/notify.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/viewmodel/common.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/viewmodel/proxy.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/core/messenger.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/dom/index.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/core/component.js","webpack:////Users/geyuhang/jinge/jinge-framework/src/components/for.js","webpack:///./app.html","webpack:////Users/geyuhang/jinge/jinge-framework/src/core/bootstrap.js","webpack:///./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","jQuery","echarts","typeOf","v","isObject","isString","isArray","Array","isFunction","instanceOf","Clazz","arrayIndexOf","array","item","indexOf","description","window","assert_fail","msg","console","error","Error","startsWith","str","search","position","STR_DEFAULT","VM_NOTIFY","VM_ON","VM_OFF","VM_CLEAR","VM_LISTENERS","VM_LISTENERS_TM","VM_LISTENERS_HANDLERS","VM_LISTENERS_CHILDREN","walkGetNode","vm","props","level","end","length","propN","node","assign","[object Object]","vmAddListener","prop","handler","split","push","vmRemoveListener","idx","splice","arrayRemove","vmClearListener","leaf","clearImm","loopClear","setImm","setImmediate","setTimeout","clearImmediate","clearTimeout","vmNotifyChanged","loopNotify","forEach","children","k","VM_PARENTS","VM_EMPTY_PARENTS","isViewModel","obj","addVMParent","parent","ps","removeVMParent","notifyPropChanged","pInfo","pVM","pName","objectPropSetHandler","target","newValType","newValIsVM","oldVal","ObjectProxyHandler","set","wrapComponent","component","Proxy","LISTENERS","Messenger","this","eventName","args","listenersMap","notifyKey","notifyArgs","listeners","notifyHelper","eventListener","me","Map","listener","onHelper","ls","clear","offHelper","delete","getParent","$ele","parentNode","createElement","tag","attrs","$e","document","an","attrName","attrValue","setAttribute","child","appendChild","createElementWithoutAttrs","createFragment","$f","createDocumentFragment","prepareNewNode","newNode","removeChild","$parent","$child","ch","cc","text","createTextNode","RENDER","RENDER_TO_DOM","ARG_COMPONENTS","CLONE","DESTROY","CONTEXT","CONTEXT_STATE","ROOT_NODES","NON_ROOT_COMPONENT_NODES","REF_NODES","SET_REF_NODE","RELATED_VM_REFS","RELATED_VM_LISTENERS","RELATED_VM_ADD","GET_STATE_NAME","UPDATE","UPDATE_IF_NEED","STATE","STATE_INITIALIZE","STATE_RENDERED","STATE_WILLDESTROY","STATE_DESTROIED","STATE_NAMES","onAfterRender","isComponent","afterRender","getOrCreateMap","comp","component_Component","template","super","componentCtx","rvl","hook","renderFn","constructor","$targetDOM","oldNode","Node","replaceChild","removeDOM","beforeDestroy","_destroy","cb","arr","ctx","ref","destroyRelatedVM","removeRootNodes","id","forceOverride","context","el","relatedComponent","rns","has","rvrs","rs","app","vm_0","class","Component","dom","body","bootComponent","bootstrap","vm_f62d74f4b3","btnHandler","onButtonClick","chart","external_jQuery_default","getChild","on","off","dispose","$evt","log","external_echarts_default","a","init","setOption","title","tooltip","legend","data","xAxis","yAxis","series","type","getElementById"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,mBClFAhC,EAAAD,QAAAkC,sBCAAjC,EAAAD,QAAAmC,sCCAO,SAAAC,EAAAC,GACP,cAAAA,EAGO,SAAAC,EAAAD,GACP,iBAAAD,EAAAC,GAEO,SAAAE,EAAAF,GACP,iBAAAD,EAAAC,GAUO,SAAAG,EAAAH,GACP,OAAAI,MAAAD,QAAAH,GAGO,SAAAK,EAAAL,GACP,mBAAAD,EAAAC,GAGO,SAAAM,EAAAN,EAAAO,GACP,OAAAP,aAAAO,EC1BO,SAAAC,EAAAC,EAAAC,GACP,OAAAD,EAAAE,QAAAD,GCGO,SAAA9B,EAAAgC,GACP,OAAAC,OAAAjC,OAAAgC,GAGO,SAAAE,EAAAC,GAEP,MADAA,GAAAC,QAAAC,MAAAF,GACA,IAAAG,MAAA,kBAGO,SAAAC,EAAAC,EAAAC,EAAAC,EAAA,GACP,OAAAF,EAAAD,WAAAE,EAAAC,UAeO,MAAAC,EAAA,UCtBA,MAAAC,EAAkB5C,IAClB6C,EAAc7C,IACd8C,EAAe9C,IACf+C,EAAiB/C,IACjBgD,EAAqBhD,IACrBiD,EAAwBjD,IACxBkD,EAA8BlD,IAC9BmD,EAA8BnD,IAGrC,SAAAoD,EAAAC,EAAAC,EAAAC,EAAA,EAAAhD,GAAA,GACA,MAAAiD,EAAAF,EAAAG,OAAA,EACA,GAAAD,EAAA,cACA,MAAAE,EAAA,GAAAJ,EAAAC,GACA,GAAMhB,EAAUmB,EAAA,KAEhB,OADAtB,QAAAC,MAAA,oGACA,KAEA,IAAAsB,EAAAN,EAAAK,GACA,IAAAC,EAAA,CACA,IAAApD,EASA,YAPAoD,EAAAN,EAAAK,GAAA/D,OAAAY,OAAA,MACAZ,OAAAiE,OAAAD,EAAA,CACAE,CAAAZ,GAAA,KACAY,CAAAX,GAAA,GACAW,CAAAV,GAAAxD,OAAAY,OAAA,QAMA,OAAAiD,IAAAD,EACAI,EAEAP,EAAAO,EAAAR,GAAAG,EAAAC,EAAA,EAAAhD,GAIO,SAAAuD,EAAAT,EAAAU,EAAAC,GACP,MAAAV,EAAgB/B,EAAOwC,OAAAE,MAAA,KACvB,OAAAX,EAAAG,OAAA,OACA,MAAAE,EAAAP,EAAAC,EAAAL,GAAAM,EAAA,MFtCO,IAAAzB,EAAAC,EACPF,EADOC,EEuCc8B,EAAAT,GFvCdpB,EEuCckC,IFrCrB,GACAnC,EAAAqC,KAAApC,GEuCO,SAAAqC,EAAAd,EAAAU,EAAAC,GACP,MAAAV,EAAgB/B,EAAOwC,OAAAE,MAAA,KACvB,OAAAX,EAAAG,OAAA,OACA,MAAAE,EAAAP,EAAAC,EAAAL,GAAAM,EAAA,MACAK,IACAK,EFtDO,SAAAnC,EAAAC,GACP,MAAAsC,EAAAxC,EAAAC,EAAAC,GACAsC,EAAA,GACAvC,EAAAwC,OAAAD,EAAA,GEoDOE,CAAWX,EAAAT,GAAAc,GADlBL,EAAAT,GAAAO,OAAA,GAIO,SAAAc,EAAAlB,IACP,SAAAM,GACA,UAAAI,KAAAJ,EAAA,CACA,MAAAa,EAAAb,EAAAI,GACA,KAAAd,KAAAuB,GAAA,OACAA,EAAAvB,KACAwB,EAAAD,EAAAvB,IACAuB,EAAAvB,GAAA,MAEAuB,EAAAtB,GAAAO,OAAA,EACAc,EAAAC,EAAArB,IACAqB,EAAArB,GAAA,KACAQ,EAAAI,GAAA,MAGAW,CAAArB,EAAAL,IAYA,MAAA2B,EAAA1C,OAAA2C,cAAA3C,OAAA4C,WACAJ,EAAAxC,OAAA6C,gBAAA7C,OAAA8C,aAkBO,SAAAC,EAAA3B,EAAAU,GACP,MAAAT,EAAgB/B,EAAOwC,OAAAE,MAAA,KACvB,OAAAX,EAAAG,OAAA,OACA,MAAAE,EAAAP,EAAAC,EAAAL,GAAAM,EAAA,MACAK,GApBA,SAAAsB,EAAAtB,GACAA,EAAAV,KACAwB,EAAAd,EAAAV,IACAU,EAAAV,GAAA,MAEAU,EAAAT,GAAAO,OAAA,IACAE,EAAAV,GAAA0B,EAAA,KACAhB,EAAAV,GAAA,KACAU,EAAAT,GAAAgC,QAAAlB,WAGA,MAAAmB,EAAAxB,EAAAR,GACA,UAAAiC,KAAAD,EACAF,EAAAE,EAAAC,IAQAH,CAAAtB,GC3GO,MAAA0B,EAAmBrF,IACnBsF,EAAA,GACA,SAAAC,EAAAC,GACP,cAAAA,GAAyBnE,EAAQmE,IAAAH,KAAAG,EAO1B,SAAAC,EAAApC,EAAAqC,EAAA3B,GACP,MAAA4B,EAAAtC,EAAAgC,GACA,QAAApG,EAAA,EAAgBA,EAAA0G,EAAAlC,OAAexE,IAC/B,GAAA0G,EAAA1G,GAAA,KAAAyG,GAAAC,EAAA1G,GAAA,KAAA8E,EAAA,OAEA4B,EAAAzB,KAAA,CAAAwB,EAAA3B,IAGO,SAAA6B,EAAAvC,EAAAqC,EAAA3B,GACP,MAAA4B,EAAAtC,EAAAgC,GACA,QAAApG,EAAA,EAAgBA,EAAA0G,EAAAlC,OAAexE,IAC/B,GAAA0G,EAAA1G,GAAA,KAAAyG,GAAAC,EAAA1G,GAAA,KAAA8E,EAEA,YADA4B,EAAAtB,OAAApF,EAAA,GCVA,SAAA4G,EAAAxC,EAAAU,GACMnB,KAASS,GACfA,EAAOT,GAASmB,GAEhBV,EAAKgC,GAAUH,QAAAY,IACf,MAAAC,EAAAC,GAAAF,EACAD,EACAE,EACMxE,EAAOwC,GAAA,CAAAiC,KAAAjC,GAAA,CAAAiC,EAAAjC,MAKb,SAAAkC,EAAAC,EAAAnC,EAAA7D,GACA,IDnBSoB,EADFF,ECoBY2C,IDnBMxB,EAAUnB,EAAA,KCqBnC,OADA8E,EAAAnC,GAAA7D,GACA,EDtBO,IAAAkB,ECwBP,MAAA+E,EAAqBhF,EAAMjB,GAC3BkG,EAAqBb,EAAWrF,GAChC,UAAAA,GAAA,WAAAiG,IAAAC,EACA,UAAA9D,MAAA,8DAGA,MAAA+D,EAAAH,EAAAnC,GASA,OARMwB,EAAWc,IACbT,EAAcS,EAAAH,EAAAnC,GAElBmC,EAAAnC,GAAA7D,EACAkG,GACIX,EAAWvF,EAAAgG,EAAAnC,GAEf8B,EAAAK,EAAAnC,IACA,EAwBO,MAAAuC,EAAA,CACPC,IAAAN,GAwFO,SAAAO,EAAAC,GACP,WAAAC,MAAAD,EAAAH,GClKO,MAAAK,EAAkB3G,IA+ClB,MAAA4G,EACP/C,cACAgD,KAAAF,GAAA,KAEA9C,OAAAiD,KAAAC,IAjDO,SAAAC,EAAAC,KAAAC,GACP,IAAAF,EAAA,OACA,MAAAG,EAAAH,EAAAlH,IAAAmH,GACAE,GACAA,EAAAjC,QAAAlB,QAAAkD,IA8CAE,CAAAP,KAAAF,GAAAG,KAAAC,GAEAlD,GAAAiD,EAAAO,GACA,MAAAC,EAAAT,KACAS,EAAAX,KACAW,EAAAX,GAAA,IAAAY,KAhDO,SAAAP,EAAAC,EAAAO,GACP,IAAAL,EAAAH,EAAAlH,IAAAmH,GACAE,IACAA,EAAA,GACAH,EAAAT,IAAAU,EAAAE,IAEAA,EAAApF,QAAAyF,GAAA,GACAL,EAAAjD,KAAAsD,GA2CAC,CAAAH,EAAAX,GAAAG,EAAAO,GAEAxD,IAAAiD,EAAAO,IAzCO,SAAAL,EAAAC,EAAAO,GACP,IAAAR,EAAA,OACA,IAAAC,EAGA,OAFAD,EAAA9B,QAAAwC,KAAAjE,OAAA,QACAuD,EAAAW,QAGA,MAAAR,EAAAH,EAAAlH,IAAAmH,GACA,IAAAE,EAAA,OACA,IAAAK,EAEA,YADAL,EAAA1D,OAAA,GAGA,MAAAW,EAAA+C,EAAApF,QAAAyF,GACApD,EAAA,GACA+C,EAAA9C,OAAAD,EAAA,GA2BAwD,CAAAf,KAAAF,GAAAG,EAAAO,GAEAxD,MAAAiD,GA1BO,IAAAE,EAAAC,EAAAD,EA2BPH,KAAAF,GA3BOM,EA2BPH,EA1BAE,IACAC,EAGAD,EAAAa,OAAAZ,GAFAD,EAAAW,UCxCO,SAAAG,EAAAC,GACP,OAAAA,EAAAC,WAeO,SAAAC,EAAAC,EAAAC,KAAAhD,GACP,MAAAiD,EAAAC,SAAAJ,cAAAC,GACA,GAAAC,EAAA,UAAAG,KAAAH,EAVOJ,EAWPK,EAXOG,EAWPD,EAXOE,EAWPL,EAAAG,GAVAP,EAAAU,aAAAF,EAAAC,GADO,IAAAT,EAAAQ,EAAAC,EAcP,OADArD,EAAAD,QAAAwD,GAAAC,EAAAP,EAAAM,IACAN,EAGO,SAAAQ,EAAAV,KAAA/C,GACP,OAAA8C,EAAAC,EAAA,QAAA/C,GAGO,SAAA0D,EAAA1D,GACP,MAAA2D,EAAAT,SAAAU,yBAEA,OADA5D,KAAAD,QAAA5F,GAAAqJ,EAAAG,EAAAxJ,IACAwJ,EAiBA,SAAAE,EAAAC,GACA,OAAO1H,EAAO0H,GACd,IAAAA,EAAAxF,OAAA,KACA,IAAAwF,EAAAxF,OAAAwF,EAAA,GAEAJ,EAAAI,GAJcA,EAkCP,SAAAC,EAAAC,EAAAC,GACPD,EAAAD,YAAAE,GAGO,SAAAT,EAAAQ,KAAAhE,GACPA,EAAAD,QAAAmE,IACA,GAAQ9H,EAAO8H,GACf,OAAAA,EAAAnE,QAAAoE,GAAAX,EAAAQ,EAAAG,IAEQhI,EAAQ+H,KAChBA,EA3DO,SAAAE,GACP,OAAAlB,SAAAmB,eAAAD,GA0DAC,CAAAH,IAEAF,EAAAR,YAAAU,KCnE+BrJ,IAAxB,MACAyJ,EAAezJ,IACf0J,EAAsB1J,IACtB2J,EAAuB3J,IACvB4J,EAAc5J,IACd6J,EAAgB7J,IAChB8J,EAAgB9J,IAChB+J,EAAsB/J,IACtBgK,GAAmBhK,IACnBiK,GAAiCjK,IACjCkK,GAAkBlK,IAClBmK,GAAqBnK,IACrBoK,GAAwBpK,IACxBqK,GAA6BrK,IAC7BsK,GAAuBtK,IACvBuK,GAAuBvK,IACvBwK,GAAexK,IACfyK,GAAuBzK,IACvB0K,GAAc1K,IACd2K,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,CACP,mDAQO,SAAAC,GAAArH,GACPsH,GAAAtH,KACAA,EAAAqG,IAAA9E,QAAA8F,IACArH,EAAAsG,IAAA/E,QAAA8F,IACArH,EAAA+G,IAAAE,GACAjH,EAAAoG,IAAA,EACApG,EAAAuH,eAcA,SAAAC,GAAAC,EAAArH,GACA,IAAA1E,EAAA+L,EAAArH,GAEA,OADA1E,MAAA+L,EAAArH,GAAA,IAAAwD,KACAlI,EAGO,MAAMgM,WAAkBzE,EAI/B0E,sBACA,YAEAzH,YAAAsE,GACA,GAAAA,cAEK,GAAU1G,EAAU0G,GACzBA,EAAA,CACAtE,CAAA8F,GAAA,CACA9F,CAAWlB,GAAWwF,SAGjB,GAAU9G,EAAQ8G,MAAa9C,KAAU8C,GAC9C,UAAA7F,MAAA,oEAEAiJ,QACA1E,KAASxB,GAAcC,EACvBuB,KAAS7D,GAAY,GACrB6D,KAAAiD,GAAA3B,IAAA2B,GAAA,KACAjD,KAAAkD,GAAA,EACAlD,KAAA8C,GAAAxB,KAAAwB,IAAA,KACA9C,KAAA6D,IAAAC,GASA9D,KAAAmD,IAAA,GAkBAnD,KAAAoD,IAAA,GAIApD,KAAAqD,IAAA,KAgCArD,KAAAwD,IAAA,KAKAxD,KAAAuD,IAAA,KAEAvG,CAAGhB,GAAKkB,EAAAC,EAAAwH,GACJ1H,EAAa+C,KAAA9C,EAAAC,GACjBwH,GAAAP,GAAAO,QAAA3E,MACA2E,EAAAlB,IAAAzD,KAAA9C,EAAAC,GAEAH,CAAAyG,IAAAjH,EAAAU,EAAAC,GACA,MAAAyH,EAAAN,GAAAtE,KAAAwD,IACA,IAAAqB,EAAAD,EAAA3L,IAAAuD,GACAqI,IACAA,EAAA,GACAD,EAAAlF,IAAAlD,EAAAqI,IAEAA,EAAAxH,KAAA,CAAAH,EAAAC,IAEAH,CAAGf,GAAMiB,EAAAC,GACT,OAAWG,EAAgB0C,KAAA9C,EAAAC,GAE3BH,CAAGd,KACCwB,EAAesC,MAEnBhD,CAAGjB,GAASmB,GACZ,OAAWiB,EAAe6B,KAAA9C,GAE1BF,CAAA+F,KACA,UAAAtH,MAAA,mBAEAuB,CAAA4F,KACA,IAAAkC,EAAA9E,KAAA+E,YAAAN,SAKA,OAJAK,GAAA9E,KAAA8C,KACAgC,EAAA9E,KAAA8C,GAAsChH,IAE7BlB,EAAUkK,IAAYzJ,IAC/ByJ,EAAA9E,MAEAhD,CAAA6F,GAAAmC,GR/LO,IOiCA1C,EAAAF,EAAA6C,EPhCPpK,EQ+LkBmK,ER/LlBE,OQ+LgC7J,IAChC2E,KAAA6D,MAAAC,IACMzI,IDjKCiH,ECmKUrB,EAAS+D,GDnKnB5C,ECmKmBpC,KAAA4C,KDnKnBqC,ECmKmBD,GDlK1B5C,EAAAD,EAAAC,KAGAE,EAAA6C,aAAA/C,EAAA6C,GCgKAd,GAAAnE,MAEAhD,CAAAgG,GAAAoC,GAAA,GACApF,KAAA6D,IAAAG,KACAhE,KAAA6D,IAAAG,GACAhE,KAAAqF,gBACAX,MAAA5D,QACAd,KAAS9D,KAoFF,SAAAqI,GACP,SAAAe,EAAApI,EAAAqI,GACA,MAAA/M,EAAA+L,EAAArH,GACA1E,IACAA,EAAA6F,QAAA,CAAAmH,EAAAC,KACAD,EAAAnH,QAAAE,GAAAgH,EAAAE,EAAAlH,IACAiH,EAAA5I,OAAA,IAEApE,EAAAsI,SAEAwE,EAAA9B,GAAA,CAAAiC,EAAAZ,KACAY,EAAQxJ,GAAM4I,EAAA,GAAAA,EAAA,MAEdS,EAAA/B,GAAA,CAAAkC,EAAAC,KAKAD,EAAApC,IAAArC,OAAA0E,KArGAC,CAAA3F,MACAA,KAAAoD,IAAA/E,QAAAuB,IACAA,EAAAoD,IAAA,KAEAhD,KAAAmD,IAAA9E,QAAAvB,IACAsH,GAAAtH,MAAAkG,IAAA,KAEAhD,KAAA6D,IAAAI,GACAjE,KAAAwD,IACAxD,KAAAoD,IACApD,KAAAqD,IACArD,KAAA8C,GACA9C,KAAAiD,GAAA,KAEAmC,GA9KA,SAAAQ,EAAAhG,EAAA0C,GACA1C,EAAAuD,IAAA9E,QAAAvB,IACAsH,GAAAtH,GAAA8I,EAAA9I,EAAAwF,IAEAA,MAA8BrB,EAASnE,IACjCuF,EAAWC,EAAAxF,MAGjB8C,EAAAuD,IAAA,KAuKAyC,CAAA5F,OAGAhD,CAAA4G,MACA5D,KAAA6D,MAAAE,IACA/D,KAAA2D,MAGA3G,CAAA2G,MACA,UAAAlI,MAAA,mBAEAuB,CAAA0G,MACA,OAAAQ,GAAAlE,KAAA6D,KAEA7G,WAAA6I,EAAAJ,EAAAK,GAAA,GACA,GAAA9F,KAAAkD,GAAA,EACA,UAAAzH,MAAA,iGA7MA,IAAAsK,EA0NA,GAXA,IAAA/F,KAAAkD,KAIAlD,KAAAiD,GAGAjD,KAAAiD,IAtNA8C,EAsNA/F,KAAAiD,IApNAnK,OAAAiE,OAAA,GAAyBgJ,GADzB,KAmNA/F,KAAAiD,GAAA,GAIAjD,KAAAkD,GAAA,GAEA2C,KAAA7F,KAAAiD,KAIA6C,EAAA,UAAArK,2BAA+DoK,sEAE/D7F,KAAAiD,GAAA4C,GAAAJ,EAEAzI,WAAA6I,GACA,OAAA7F,KAAAiD,GAAAjD,KAAAiD,GAAA4C,GAAA,KAEA7I,CAAAsG,IAAAoC,EAAAM,EAAAC,GACA,MAAAC,EAAA5B,GAAAtE,KAAAqD,IACA,GAAA6C,EAAAC,IAAAT,GACA,UAAAjK,mBAAmCiK,oBAAsB1F,KAAA+E,YAAApM,yBAEzD,MAAAyN,EAAA9B,GAAA2B,EAAA1C,IACA,IAAA8C,EAAAD,EAAAnN,IAAA+G,MACAqG,IACAA,EAAA,GACAD,EAAA1G,IAAAM,KAAAqG,IAEAA,EAAAhJ,KAAAqI,GACAQ,EAAAR,GAAAM,EAEAhJ,SAAA0I,GAIA,OAHA1F,KAAA6D,MAAAE,IACAxI,QAAAC,kDAAgEwE,KAAA+E,YAAApM,yFAEhEqH,KAAAqD,IAAArD,KAAAqD,IAAAqC,GAAA,KAEA1I,eAGAA,kBA2BO,SAAAoH,GAAA3L,GACP,OAASoC,EAAUpC,EAAI+L,IC9SGrL,EAAM,UACRA,EAAM,QACFA,EAAM,iDCrBnBmN,GAAA,SAAA1G,GACf,MAAA2G,EAAA3G,EACA,OACA,MACA,MAAAoG,EAAejE,EACf,KACA,gCAGA,OADAnC,EAAcuD,IAAmB9F,KAAA2I,GACjCA,GANA,GAQA,MACA,MAAAA,EAAejE,EACf,IACA,MACA,MAAAiE,EAAmB5E,EACnB,MACA,CACAoF,MAAA,oBAIA,OADAD,EAAajD,IAAqB,QAAA0C,EAAApG,GAClCoG,GARA,IAYA,OADApG,EAAcuD,IAAmB9F,KAAA2I,GACjCA,GAfA,GAiBA,MACA,MAAAA,EAAejE,EACf,IACA,MACA,MAAAiE,EAAmBjE,EACnB,SACA,gBAGA,OADAwE,EAAajD,IAAqB,MAAA0C,EAAApG,GAClCoG,GANA,IAUA,OADApG,EAAcuD,IAAmB9F,KAAA2I,GACjCA,GAbA,MC1CO,SAAAS,EAAAC,GACP,GAAAA,IAAAlF,SAAAmF,KACA,UAAAlL,MAAA,yCAEA,MAAAmL,EAAA,IAAAH,EACOrC,GAAWwC,IAAiBvL,IACnCuL,EAAgB/D,GAAa6D,GCoD7BG,CA7CA,cAAkBrC,GAClBC,sBACA,OAAW6B,GAEXtJ,YAAAkD,GACAwE,MAAAxE,GACA,MAAA4G,EAA0BnH,EAAwBK,MAGlD,OAFA8G,EAAAC,WAAAD,EAAAE,cAAApN,KAAAoG,MACA8G,EAAAG,MAAA,KACAH,EAEA9J,cACIkK,KAAClH,KAAAmH,SAAA,QAAAC,GAAA,QAAApH,KAAA+G,YAEL/J,gBACIkK,KAAClH,KAAAmH,SAAA,QAAAE,IAAA,QAAArH,KAAA+G,YACL/G,KAAAiH,OAAAjH,KAAAiH,MAAAK,UAEAtK,cAAAuK,GACAhM,QAAAiM,IAAAD,GACAvH,KAAAiH,QACAjH,KAAAiH,MAAmBQ,GAAAC,EAAOC,KAAA3H,KAAAmH,SAAA,WAG1BnH,KAAAiH,MAAAW,UAAA,CACAC,MAAA,CACAnF,KAAA,yBAEAoF,QAAA,GACAC,OAAA,CACAC,KAAA,WAEAC,MAAA,CACAD,KAAA,6DAEAE,MAAA,GACAC,OAAA,EACAxP,KAAA,QACAyP,KAAA,MACAJ,KAAA,yBAMaxG,SAAA6G,eAAA","file":"bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = jQuery;","module.exports = echarts;","export function typeOf(v) {\n  return typeof v;\n}\n\nexport function isObject(v) {\n  return typeOf(v) === 'object';\n}\nexport function isString(v) {\n  return typeOf(v) === 'string';\n}\nexport function isNumber(v) {\n  return typeOf(v) === 'number' && !Number.isNaN(v) && Number.isFinite(v);\n}\n\nexport function isUndefined(v) {\n  return typeOf(v) === 'undefined';\n}\n\nexport function isArray(v) {\n  return Array.isArray(v);\n}\n\nexport function isFunction(v) {\n  return typeOf(v) === 'function';\n}\n\nexport function instanceOf(v, Clazz) {\n  return v instanceof Clazz;\n}\n\nexport function isDOMNode(ele) {\n  return instanceOf(ele, Node);\n}\n\nexport function isPropertyEnumerable(obj, key) {\n  return obj.propertyIsEnumerable(key);\n}\nexport function getOwnPropertySymbols(obj) {\n  return Object.getOwnPropertySymbols(obj);\n}","\nexport function arrayIndexOf(array, item) {\n  return array.indexOf(item);\n}\n\nexport function arrayRemove(array, item) {\n  const idx = arrayIndexOf(array, item);\n  if (idx < 0) return false;\n  array.splice(idx, 1);\n  return true;\n}\n\nexport function arrayPushIfNotExist(array, item) {\n  const idx = arrayIndexOf(array, item);\n  if (idx >= 0) return;\n  array.push(item);\n}\n","\nexport * from './type';\nexport * from './array';\nexport * from './diff';\n\nexport function Symbol(description) {\n  return window.Symbol(description);\n}\n\nexport function assert_fail(msg) {\n  msg && console.error(msg);\n  throw new Error('assert failed!');\n}\n\nexport function startsWith(str, search, position = 0) {\n  return str.startsWith( search, position);\n}\n\nexport function defineProperty(...args) {\n  return Object.defineProperty(...args);\n}\n\nexport function defineProperties(...args) {\n  return Object.defineProperties(...args);\n}\n\nexport function simpleUUID() {\n  return Date.now().toString(32) + Math.floor(Math.random() * 0xffff).toString(32);\n}\n\nexport const STR_DEFAULT = 'default';\nexport const STR_JINGE = 'jinge';\nexport const STR_EMPTY = 'empty';\n\nexport function mapObject(obj, fn) {\n  const newObj = {};\n  for(const k in obj) {\n    newObj[k] = fn(obj[k], k);\n  }\n  return newObj;\n}","import {\n  isArray,\n  arrayRemove,\n  arrayPushIfNotExist,\n  Symbol,\n  startsWith\n} from '../util';\n\nexport const VM_NOTIFY = Symbol();\nexport const VM_ON = Symbol();\nexport const VM_OFF = Symbol();\nexport const VM_CLEAR = Symbol();\nexport const VM_LISTENERS = Symbol();\nexport const VM_LISTENERS_TM = Symbol();\nexport const VM_LISTENERS_HANDLERS = Symbol();\nexport const VM_LISTENERS_CHILDREN = Symbol();\n\n\nfunction walkGetNode(vm, props, level = 0, create = false) {\n  const end = props.length - 1;\n  if (end < 0) return null;\n  const propN = '' + props[level]; // force to string\n  if (startsWith(propN, '_')) {\n    console.error('WARN: property name startsWith char \"_\" is private/once-used property, ignored get/set listener.');\n    return null;\n  }\n  let node = vm[propN];\n  if (!node) {\n    if (create) {\n      // node can't have any prototype function.\n      node = vm[propN] = Object.create(null);\n      Object.assign(node, {\n        [VM_LISTENERS_TM]: null,\n        [VM_LISTENERS_HANDLERS]: [],\n        [VM_LISTENERS_CHILDREN]: Object.create(null)\n      });\n    } else {\n      return null;\n    }\n  }\n  if (end === level) {\n    return node;\n  } else {\n    return walkGetNode(node[VM_LISTENERS_CHILDREN], props, level + 1, create);\n  }\n}\n\nexport function vmAddListener(vm, prop, handler) {\n  const props = isArray(prop) ? prop : prop.split('.');\n  if (props.length === 0) return;\n  const node = walkGetNode(vm[VM_LISTENERS], props, 0, true);\n  arrayPushIfNotExist(node[VM_LISTENERS_HANDLERS], handler);\n}\n\nexport function vmRemoveListener(vm, prop, handler) {\n  const props = isArray(prop) ? prop : prop.split('.');\n  if (props.length === 0) return;\n  const node = walkGetNode(vm[VM_LISTENERS], props, 0, false);\n  if (!node) return;\n  if (!handler) node[VM_LISTENERS_HANDLERS].length = 0; // remove all\n  else arrayRemove(node[VM_LISTENERS_HANDLERS], handler);\n}\n\nexport function vmClearListener(vm) {\n  function loopClear(node) {\n    for(const prop in node) {\n      const leaf = node[prop];\n      if (!(VM_LISTENERS_TM in leaf)) return;\n      if (leaf[VM_LISTENERS_TM]) {\n        clearImm(leaf[VM_LISTENERS_TM]);\n        leaf[VM_LISTENERS_TM] = null;\n      }\n      leaf[VM_LISTENERS_HANDLERS].length = 0;\n      vmClearListener(leaf[VM_LISTENERS_CHILDREN]);\n      leaf[VM_LISTENERS_CHILDREN] = null;\n      node[prop] = null;\n    }\n  }\n  loopClear(vm[VM_LISTENERS]);\n}\n\nexport function vmAddMessengerInterface(vm) {\n  if (VM_LISTENERS in vm) return;\n  vm[VM_LISTENERS] = {};\n  vm[VM_ON] = (prop, handler) => vmAddListener(vm, prop, handler);\n  vm[VM_OFF] = (prop, handler) => vmRemoveListener(vm, prop, handler);\n  vm[VM_NOTIFY] = prop => vmNotifyChanged(vm, prop);\n  vm[VM_CLEAR] = () => vmClearListener(vm);\n}\n\nconst setImm = window.setImmediate || window.setTimeout;\nconst clearImm = window.clearImmediate || window.clearTimeout;\n\nfunction loopNotify(node) {\n  if (node[VM_LISTENERS_TM]) {\n    clearImm(node[VM_LISTENERS_TM]);\n    node[VM_LISTENERS_TM] = null;\n  }\n  if (node[VM_LISTENERS_HANDLERS].length > 0) {\n    node[VM_LISTENERS_TM] = setImm(() => {\n      node[VM_LISTENERS_TM] = null;\n      node[VM_LISTENERS_HANDLERS].forEach(handler => handler());\n    });\n  }\n  const children = node[VM_LISTENERS_CHILDREN];\n  for(const k in children) {\n    loopNotify(children[k]);\n  }\n}\nexport function vmNotifyChanged(vm, prop) {\n  const props = isArray(prop) ? prop : prop.split('.');\n  if (props.length === 0) return;\n  const node = walkGetNode(vm[VM_LISTENERS], props, 0, false);\n  if (!node) return;\n  loopNotify(node);\n}\n","import { \n  isObject,\n  isString,\n  Symbol,\n  startsWith\n} from '../util';\n\nexport const VM_PARENTS = Symbol();\nexport const VM_EMPTY_PARENTS = [];\nexport function isViewModel(obj) {\n  return obj !== null && isObject(obj) && (VM_PARENTS in obj);\n}\n\nexport function isPublicProp(v) {\n  return isString(v) && !startsWith(v, '_');\n}\n\nexport function addVMParent(vm, parent, prop) {\n  const ps = vm[VM_PARENTS];\n  for(let i = 0; i < ps.length; i++) {\n    if (ps[i][0] === parent && ps[i][1] === prop) return;\n  }\n  ps.push([parent, prop]);\n}\n\nexport function removeVMParent(vm, parent, prop) {\n  const ps = vm[VM_PARENTS];\n  for(let i = 0; i < ps.length; i++) {\n    if (ps[i][0] === parent && ps[i][1] === prop) {\n      ps.splice(i, 1);\n      return;\n    }\n  }\n}","import {\n  typeOf,\n  instanceOf,\n  isNumber,\n  isArray\n} from '../util';\nimport {\n  VM_PARENTS,\n  VM_EMPTY_PARENTS,\n  isViewModel,\n  isPublicProp,\n  addVMParent,\n  removeVMParent\n} from './common';\nimport {\n  VM_NOTIFY,\n  vmAddMessengerInterface\n} from './notify';\n\nfunction notifyPropChanged(vm, prop) {\n  if (VM_NOTIFY in vm) {\n    vm[VM_NOTIFY](prop);\n  }\n  vm[VM_PARENTS].forEach(pInfo => {\n    const [pVM, pName] = pInfo;\n    notifyPropChanged(\n      pVM,\n      isArray(prop) ? [pName, ...prop] : [pName, prop]\n    );\n  });\n}\n\nfunction objectPropSetHandler(target, prop, value) {\n  if (!isPublicProp(prop)) {\n    target[prop] = value;\n    return true;\n  }\n  const newValType = typeOf(value);\n  const newValIsVM = isViewModel(value);\n  if (value !== null && newValType === 'object' && !newValIsVM) {\n    throw new Error('public property of ViewModel target must also be ViewModel');\n  }\n  // console.log(`'${prop}' changed from ${store[prop]} to ${value}`);\n  const oldVal = target[prop];\n  if (isViewModel(oldVal)) {\n    removeVMParent(oldVal, target, prop);\n  }\n  target[prop] = value;\n  if (newValIsVM) {\n    addVMParent(value, target, prop);\n  }\n  notifyPropChanged(target, prop);\n  return true;\n}\n\nfunction arrayPropSetHandler(target, prop, value) {\n  if (prop === 'length') {\n    return arrayLengthSetHandler(target, value);\n  }\n  return objectPropSetHandler(target, prop, value);\n}\n\nfunction arrayLengthSetHandler(target, value) {\n  if (!isNumber(value)) throw new Error('bad argument. array length must be validate number.');\n  const oldLen = target.length;\n  if (oldLen > value) for(let i = value; i < oldLen; i++) {\n    const v = target[i];\n    isViewModel(v) && removeVMParent(v, target, i);\n  }\n  target.length = value;\n  if (oldLen !== value) {\n    target[VM_PARENTS].forEach(ps => notifyPropChanged(ps[0], ps[1]));\n  }\n  return true;\n}\n\nexport const ObjectProxyHandler = {\n  set: objectPropSetHandler\n};\n\n/**\n * functions need to be wrap.\n * if first bit is 1, it means this function return another Array need to be convert to ViewModel\n * if second bit is 1, it means this function will change array itself, need to notify change.\n */\nconst ArrayFns = {\n  push: 2,\n  pop: 2,\n  shift: 2,\n  unshift: 2,\n  splice: 3,\n  reverse: 2,\n  sort: 2,\n  fill: 2,\n  slice: 1,\n  concat: 1,\n  map: 1\n};\n\nexport const ArrayProxyHandler = {\n  get(vm, prop) {\n    if (prop in ArrayFns) {\n      const tag = ArrayFns[prop];\n      const fn = vm[prop];\n      return function(...args) {\n        const rtn = fn.call(vm, ...args);\n        if ((tag & 2) > 0) {\n          vm[VM_PARENTS].forEach(ps => notifyPropChanged(ps[0], ps[1]));\n        }\n        if ((tag & 1) > 0 && isArray(rtn) && !(VM_PARENTS in rtn)) {\n          return wrapViewModel(rtn);\n        } else {\n          return rtn;\n        }\n      };\n    } else {\n      return vm[prop];\n    }\n  },\n  set: arrayPropSetHandler\n};\n\n\nfunction wrapProp(vm, prop) {\n  const v = vm[prop];\n  if (v === null || typeOf(v) !== 'object' || VM_PARENTS in v) return;\n  if (instanceOf(v, Boolean) || instanceOf(v, RegExp)) {\n    v[VM_PARENTS] = VM_EMPTY_PARENTS;\n    return;\n  }\n  vm[prop] = wrapViewModel(v);\n  addVMParent(v, vm, prop);\n}\nfunction wrapProxy(vm, isArr, addMessengerInterface) {\n  vm[VM_PARENTS] = [];\n  if (addMessengerInterface) {\n    vmAddMessengerInterface(vm);\n  }\n  return new Proxy(vm, isArr ? ArrayProxyHandler : ObjectProxyHandler);\n}\n\nexport function wrapViewModel(plainObjectOrArray, addMessengerInterface = false) {\n  if (plainObjectOrArray === null) return plainObjectOrArray;\n  if (typeOf(plainObjectOrArray) === 'object') {\n    // already been ViewModel\n    if (VM_PARENTS in plainObjectOrArray) return plainObjectOrArray;\n\n    if (instanceOf(plainObjectOrArray, Boolean) || instanceOf(plainObjectOrArray, RegExp)) {\n      plainObjectOrArray[VM_PARENTS] = VM_EMPTY_PARENTS;\n    } else if (isArray(plainObjectOrArray)) {\n      for(let i = 0; i < plainObjectOrArray.length; i++) {\n        wrapProp(plainObjectOrArray, i);\n      }\n      return wrapProxy(plainObjectOrArray, true, addMessengerInterface);\n    } else {\n      for(const k in plainObjectOrArray) {\n        wrapProp(plainObjectOrArray, k);\n      }\n      return wrapProxy(plainObjectOrArray, false, addMessengerInterface);\n    }\n  } else {\n    return plainObjectOrArray;\n  }\n}\n\nexport function wrapComponent(component) {\n  return new Proxy(component, ObjectProxyHandler);\n}\n","import {\n  Symbol\n} from '../util';\n\nexport const LISTENERS = Symbol();\n\nexport function notifyHelper(listenersMap, notifyKey, ...notifyArgs) {\n  if (!listenersMap) return;\n  const listeners = listenersMap.get(notifyKey);\n  if (!listeners) return;\n  listeners.forEach(handler => handler(...notifyArgs));\n}\n\nexport function onHelper(listenersMap, notifyKey, listener) {\n  let listeners = listenersMap.get(notifyKey);\n  if (!listeners) {\n    listeners = [];\n    listenersMap.set(notifyKey, listeners);\n  }\n  if (listeners.indexOf(listener) < 0) {\n    listeners.push(listener);\n  }\n}\n\nexport function offHelper(listenersMap, notifyKey, listener) {\n  if (!listenersMap) return;\n  if (!notifyKey) {\n    listenersMap.forEach(ls => ls.length = 0);\n    listenersMap.clear();\n    return;\n  }\n  const listeners = listenersMap.get(notifyKey);\n  if (!listeners) return;\n  if (!listener) {\n    listeners.length = 0; // clear all if listener is not provided\n    return;\n  }\n  const idx = listeners.indexOf(listener);\n  if (idx < 0) return;\n  listeners.splice(idx, 1);\n}\n\nexport function clearHelper(listenersMap, notifyKey) {\n  if (!listenersMap) return;\n  if (!notifyKey) {\n    listenersMap.clear();\n  } else {\n    listenersMap.delete(notifyKey);\n  }\n}\n\nexport class Messenger {\n  constructor() {\n    this[LISTENERS] = null;\n  }\n  notify(eventName, ...args) {\n    notifyHelper(this[LISTENERS], eventName, ...args);\n  }\n  on(eventName, eventListener) {\n    const me = this;\n    if (!me[LISTENERS]) {\n      me[LISTENERS] = new Map();\n    }\n    onHelper(me[LISTENERS], eventName, eventListener);\n  }\n  off(eventName, eventListener) {\n    offHelper(this[LISTENERS], eventName, eventListener);\n  }\n  clear(eventName) {\n    clearHelper(this[LISTENERS], eventName);\n  }\n}","import {\n  isString,\n  isArray\n} from '../util';\n\nexport function getParent($ele) {\n  return $ele.parentNode;\n}\n\nexport function setText($element, text) {\n  $element.textContent = text;\n}\n\nexport function setAttribute($ele, attrName, attrValue) {\n  $ele.setAttribute(attrName, attrValue);\n}\n\nexport function setInputValue($inputOrTextarea, value) {\n  $inputOrTextarea.value = value;\n}\n\nexport function createElement(tag, attrs, ...children) {\n  const $e = document.createElement(tag);\n  if (attrs) for(const an in attrs) {\n    setAttribute($e, an, attrs[an]);\n  }\n  children.forEach(child => appendChild($e, child));\n  return $e;\n}\n\nexport function createElementWithoutAttrs(tag, ...children) {\n  return createElement(tag, null, ...children);\n}\n\nexport function createFragment(children) {\n  const $f = document.createDocumentFragment();\n  if (children) children.forEach(c => appendChild($f, c));\n  return $f;\n}\n\nexport function createTextNode(text) {\n  return document.createTextNode(text);\n}\n\nexport function createElementWithChild(tag, attrs, child) {\n  const $e = createElement(tag, attrs);\n  appendChild($e, child);\n  return $e;\n}\n\nexport function createComment(data) {\n  return document.createComment(data);\n}\n\nfunction prepareNewNode(newNode) {\n  if (!isArray(newNode)) return newNode;\n  if (newNode.length === 0) return null;\n  else if (newNode.length === 1) return newNode[0];\n  else {\n    return createFragment(newNode);\n  }\n}\n\nexport function replaceChild($parent, newNode, oldNode) {\n  if (!(newNode = prepareNewNode(newNode))) {\n    return;\n  }\n  $parent.replaceChild(newNode, oldNode);\n}\n\nexport function insertBefore($parent, newNode, referenceNode) {\n  if (!(newNode = prepareNewNode(newNode))) {\n    return;\n  }\n  $parent.insertBefore(newNode, referenceNode);\n}\n\nexport function insertAfter($parent, newNode, referenceNode) {\n  if (!(newNode = prepareNewNode(newNode))) {\n    return;\n  }\n  const rn = referenceNode.nextSibling;\n  if (!rn) {\n    appendChild($parent, newNode);\n  } else {\n    insertBefore($parent, newNode, rn);\n  }\n}\n\nexport function removeChild($parent, $child) {\n  $parent.removeChild($child);\n}\n\nexport function appendChild($parent, ...children) {\n  children.forEach(ch => {\n    if (isArray(ch)) {\n      return ch.forEach(cc => appendChild($parent, cc));\n    }\n    if (isString(ch)) {\n      ch = createTextNode(ch);\n    }\n    $parent.appendChild(ch);\n  });\n}\n\nexport function hasClass($ele, className) {\n  return $ele.classList.contains(className);\n}\n\nexport function toggleClass($ele, ...args) {\n  return $ele.classList.toggle(...args);\n}\nexport function addClass($ele, className) {\n  return toggleClass($ele, className, true);\n}\n\nexport function removeClass($ele, className) {\n  return toggleClass($ele, className, false);\n}\n\nexport function addEvent($element, eventName, handler, capture = false) {\n  $element.addEventListener(eventName, handler, capture);\n}\n\nexport function removeEvent($element, eventName, handler) {\n  $element.removeEventListener(eventName, handler);\n}","import {\n  vmAddListener,\n  vmRemoveListener,\n  vmNotifyChanged,\n  VM_ON,\n  VM_OFF,\n  VM_CLEAR,\n  VM_LISTENERS,\n  VM_NOTIFY,\n  vmClearListener\n} from '../viewmodel/notify';\nimport {\n  VM_PARENTS,\n  VM_EMPTY_PARENTS\n} from '../viewmodel/common';\nimport {\n  Messenger\n} from './messenger';\nimport {\n  Symbol,\n  isDOMNode,\n  instanceOf,\n  assert_fail,\n  isFunction,\n  STR_DEFAULT,\n  isObject,\n  isArray\n} from '../util';\nimport {\n  getParent,\n  removeChild,\n  replaceChild\n} from '../dom';\n\nexport const TEMPLATE_RENDER = Symbol();\nexport const RENDER = Symbol();\nexport const RENDER_TO_DOM = Symbol();\nexport const ARG_COMPONENTS = Symbol();\nexport const CLONE = Symbol();\nexport const DESTROY = Symbol();\nexport const CONTEXT = Symbol();\nexport const CONTEXT_STATE = Symbol();\nexport const ROOT_NODES = Symbol();\nexport const NON_ROOT_COMPONENT_NODES = Symbol();\nexport const REF_NODES = Symbol();\nexport const SET_REF_NODE = Symbol();\nexport const RELATED_VM_REFS = Symbol();\nexport const RELATED_VM_LISTENERS = Symbol();\nexport const RELATED_VM_ADD = Symbol();\nexport const GET_STATE_NAME = Symbol();\nexport const UPDATE = Symbol();\nexport const UPDATE_IF_NEED = Symbol();\nexport const STATE = Symbol();\nexport const STATE_INITIALIZE = 0;\nexport const STATE_RENDERED = 1;\nexport const STATE_WILLDESTROY = 2;\nexport const STATE_DESTROIED = 4;\nexport const STATE_NAMES = [\n  'initialize', 'rendered', 'willdestroy', 'destroied'\n];\n\nfunction copyContext(context) {\n  if (!context) return null;\n  return Object.assign({}, context);\n}\n\nexport function onAfterRender(node) {\n  if (!isComponent(node)) return; // skip html-node\n  node[ROOT_NODES].forEach(onAfterRender);\n  node[NON_ROOT_COMPONENT_NODES].forEach(onAfterRender);\n  node[STATE] = STATE_RENDERED;\n  node[CONTEXT_STATE] = -1; // has been rendered, can't modify context\n  node.afterRender();\n}\n\nfunction removeRootNodes(component, $parent) {\n  component[ROOT_NODES].forEach(node => {\n    if (isComponent(node)) removeRootNodes(node, $parent);\n    else {\n      if (!$parent) $parent = getParent(node);\n      removeChild($parent, node);\n    }\n  });\n  component[ROOT_NODES] = null;\n}\n\nfunction getOrCreateMap(comp, prop) {\n  let m = comp[prop];\n  if (!m) m = comp[prop] = new Map();\n  return m;\n}\n\nexport class Component extends Messenger {\n  /**\n   * compiler will auto transform the `template` getter's return value from String to Render Function.\n   */\n  static get template() {\n    return null;\n  }\n  constructor(attrs) {\n    if (attrs === null || attrs === undefined) {\n      // do nothing.\n    } else if (isFunction(attrs)) {\n      attrs = {\n        [ARG_COMPONENTS]: {\n          [STR_DEFAULT]: attrs\n        }\n      };\n    } else if (isObject(attrs) && !(VM_PARENTS in attrs)) {\n      throw new Error('First argument passed to Component constructor must be ViewModel');\n    }\n    super();\n    this[VM_PARENTS] = VM_EMPTY_PARENTS;\n    this[VM_LISTENERS] = {};\n    this[CONTEXT] = attrs ? attrs[CONTEXT] : null;\n    this[CONTEXT_STATE] = 0;\n    this[ARG_COMPONENTS] = attrs ? (attrs[ARG_COMPONENTS] || null) : null;\n    this[STATE] = STATE_INITIALIZE;\n    /**\n     * ROOT_NODES means root children of this component,\n     *   include html-nodes and component-nodes.\n     * We use this infomation to remove DOM after this component is destroied.\n     * We do not maintain the whole parent-child view-tree but only root children,\n     * because when we remove the root children, whole view-tree will be\n     * removed, so we do not need waste memory to maintain whole view-tree.\n     */\n    this[ROOT_NODES] = [];\n    /**\n     * NON_ROOT_COMPONENT_NODES means nearest non-root component-nodes in the view-tree.\n     * Node in view-tree have two types, html-node and component-node.\n     *   html-node include html dom node and html text node,\n     *   component-node is an instance of a Component.\n     * For example, we have rendered a view-tree:\n     *             RootApp(Component)\n     *             /     |          \\\n     *         h1(Html)  h2(Html)  A(Component)\n     *            |                 |\n     *        C(Component)     D(Component)\n     *\n     * The nearest non-root component-nodes of RootApp include C,\n     *   but not include A(as it's root) or D(as it's not nearest).\n     * \n     * By the way, the ROOT_NODES of view-tree above is [h1, h2, A]\n     */\n    this[NON_ROOT_COMPONENT_NODES] = [];\n    /**\n     * REF_NODES contains all children with ref: attribute.\n     */\n    this[REF_NODES] = null;\n    /**\n     * If some child of this component is passed as argument(ie. \n     * use arg:pass attribute) like ng-tranclude in angular 1.x,\n     * the child may contain some messenger listeners not belong to \n     * this component but belong to outer parent.\n     * \n     * When destroy this component, we should also remove messenger listeners\n     *   belong to outer parent to prevent memory leak.\n     * To implement this goal, we maitain RELATED_VM_LISTENERS.\n     * When render view-tree, any messenger listeners belong to outer\n     * parent, will be also linked under RELATED_VM_LISTENERS, then \n     * when we destroy this component, the listeners can also be clear.\n     * \n     * For examle:\n     * \n     * <!-- outer parent: RootApp -->\n     * <div>\n     * <if expect=\"show\">\n     * <Tooltip>\n     * <argument arg:pass=\"default\">\n     * <p>hello, world. my name is ${name}</p>\n     * </argument>\n     * </Tooltip>\n     * </if>\n     * </div>\n     * \n     * when the `show` variable changed from true to false, the\n     * Tooltip component will be destroy. The messenger listener belong\n     * to the outer parent RootApp which watch `name` variable should \n     * also be removed.\n     */\n    this[RELATED_VM_LISTENERS] = null;\n    /**\n     * Simalary as RELATED_VM_LISTENERS, RELATED_VM_REFS stores\n     *   ref elements of parent component.\n     */\n    this[RELATED_VM_REFS] = null;\n  }\n  [VM_ON](prop, handler, componentCtx) {\n    vmAddListener(this, prop, handler);\n    if (!componentCtx || !isComponent(componentCtx) || componentCtx === this) return;\n    componentCtx[RELATED_VM_ADD](this, prop, handler);\n  }\n  [RELATED_VM_ADD](vm, prop, handler) {\n    const rvl = getOrCreateMap(this, RELATED_VM_LISTENERS);\n    let hook = rvl.get(vm);\n    if (!hook) {\n      hook = [];\n      rvl.set(vm, hook);\n    }\n    hook.push([prop, handler]);\n  }\n  [VM_OFF](prop, handler) {\n    return vmRemoveListener(this, prop, handler);\n  }\n  [VM_CLEAR]() {\n    vmClearListener(this);\n  }\n  [VM_NOTIFY](prop) {\n    return vmNotifyChanged(this, prop);\n  }\n  [CLONE]() {\n    throw new Error('abstract method');\n  }\n  [RENDER]() {\n    let renderFn = this.constructor.template;\n    if (!renderFn && this[ARG_COMPONENTS]) {\n      renderFn = this[ARG_COMPONENTS][STR_DEFAULT];\n    }\n    if (!isFunction(renderFn)) assert_fail();\n    return renderFn(this);\n  }\n  [RENDER_TO_DOM]($targetDOM) {\n    if (!isDOMNode($targetDOM)) assert_fail();\n    if (this[STATE] !== STATE_INITIALIZE) {\n      assert_fail();\n    }\n    replaceChild(getParent($targetDOM), this[RENDER](), $targetDOM);\n    onAfterRender(this);\n  }\n  [DESTROY](removeDOM = true) {\n    if (this[STATE] > STATE_WILLDESTROY) return;\n    this[STATE] = STATE_WILLDESTROY;\n    this.beforeDestroy();\n    super.clear();   // dont forgot call super clear.\n    this[VM_CLEAR](); // dont forgot clear vm listeners\n    destroyRelatedVM(this);\n    this[NON_ROOT_COMPONENT_NODES].forEach(component => {\n      component[DESTROY](false);\n    });\n    this[ROOT_NODES].forEach(node => {\n      if (isComponent(node)) node[DESTROY](false);\n    });\n    this[STATE] = STATE_DESTROIED;\n    this[RELATED_VM_LISTENERS] =\n      this[NON_ROOT_COMPONENT_NODES] =\n      this[REF_NODES] =\n      this[ARG_COMPONENTS] =\n      this[CONTEXT] = null;\n    \n    if (removeDOM) {\n      removeRootNodes(this);\n    }\n  }\n  [UPDATE_IF_NEED]() {\n    if (this[STATE] === STATE_RENDERED) {\n      this[UPDATE]();\n    }\n  }\n  [UPDATE]() {\n    throw new Error('abstract method');\n  }\n  [GET_STATE_NAME]() {\n    return STATE_NAMES[this[STATE]];\n  }\n  setContext(id, ctx, forceOverride = false) {\n    if (this[CONTEXT_STATE] < 0) {\n      throw new Error('Can\\'t setContext after component has been rendered. Try put setContext code into constructor.');\n    }\n    if (this[CONTEXT_STATE] === 0) {\n      // we copy context to make sure child component do not modify context passed from parent.\n      // we do not copy it by default until setContext function is called, because it unnecessary to waste memory if\n      // child component do not modify the context.\n      if (!this[CONTEXT]) {\n        this[CONTEXT] = {};\n      } else {\n        this[CONTEXT] = copyContext(this[CONTEXT]);\n      }\n      this[CONTEXT_STATE] = 1; // has been copied.\n    }\n    if (id in this[CONTEXT]) {\n      // override exist may case hidden bug hard to debug.\n      // so we force programmer to pass third argument to \n      //   tell us he/she know what he/she is doing.\n      if (!forceOverride) throw new Error(`Contenxt with id: ${id} is exist. Pass third argument forceOverride=true to override it.`);\n    }\n    this[CONTEXT][id] = ctx;\n  }\n  getContext(id) {\n    return this[CONTEXT] ? this[CONTEXT][id] : null;\n  }\n  [SET_REF_NODE](ref, el, relatedComponent) {\n    const rns = getOrCreateMap(this, REF_NODES);\n    if (rns.has(ref)) {\n      throw new Error(`ref name '${ref}' of component '${this.constructor.name}' is dulplicated.`);\n    }\n    const rvrs = getOrCreateMap(relatedComponent, RELATED_VM_REFS);\n    let rs = rvrs.get(this);\n    if (!rs) {\n      rs = [];\n      rvrs.set(this, rs);\n    }\n    rs.push(ref);\n    rns[ref] = el;\n  }\n  getChild(ref) {\n    if (this[STATE] !== STATE_RENDERED) {\n      console.error(`Warning: call getChild before component '${this.constructor.name}' is rendered will get nothing, try put getChild into afterRender lifecycle hook.`);\n    }\n    return this[REF_NODES] ? this[REF_NODES][ref] : null;\n  }\n  afterRender() {\n    // life time hook\n  }\n  beforeDestroy() {\n    // life time hook\n  }\n}\n\nexport function destroyRelatedVM(comp) {\n  function _destroy(prop, cb) {\n    const m = comp[prop];\n    if (!m) return;\n    m.forEach((arr, ctx) => {\n      arr.forEach(k => cb(ctx, k));\n      arr.length = 0;\n    });\n    m.clear();\n  }\n  _destroy(RELATED_VM_LISTENERS, (ctx, hook) => {\n    ctx[VM_OFF](hook[0], hook[1]);\n  });\n  _destroy(RELATED_VM_REFS, (ctx, ref) => {\n    // const rn = ctx[REF_NODES];\n    // if (rn) debugger;\n    // rn.delete(ref);\n    // debugger;\n    ctx[REF_NODES].delete(ref);\n  });\n}\n\nexport function isComponent(c) {\n  return instanceOf(c, Component);\n}\n\nexport function assertRenderResults(renderResults) {\n  if (!isArray(renderResults) || renderResults.length === 0) {\n    throw new Error('Render results of component is empty');\n  }\n  return renderResults;\n}\n\nexport function getFirstHtmlDOM(el) {\n  const ns = el[ROOT_NODES];\n  if (!ns || ns.length === 0) assert_fail();\n  if (isComponent(ns[0])) return getFirstHtmlDOM(ns[0]);\n  else return ns[0];\n}","\nimport {\n  VM_ON as VM_ON_f62d74f4b3\n} from '/Users/geyuhang/jinge/jinge-framework/src/viewmodel/notify';\nimport {\n  wrapComponent as wrapComponent_f62d74f4b3\n} from '/Users/geyuhang/jinge/jinge-framework/src/viewmodel/proxy';\n\nimport {\n  Component,\n  RENDER,\n  ROOT_NODES,\n  ARG_COMPONENTS,\n  UPDATE_IF_NEED,\n  UPDATE,\n  DESTROY,\n  isComponent,\n  getFirstHtmlDOM\n} from '../core/component';\nimport {\n  isArray,\n  Symbol,\n  STR_DEFAULT,\n  isObject,\n  assert_fail,\n  STR_EMPTY\n} from '../util';\nimport {\n  createComment,\n  createFragment,\n  appendChild,\n  getParent,\n  insertBefore,\n  removeChild\n} from '../dom';\nimport {\n  VM_PARENTS\n} from '../viewmodel/common';\n\nexport const FOR_LENGTH = Symbol('length');\nexport const FOR_KEYS = Symbol('keys');\nexport const FOR_KEY_NAME = Symbol('key');\n\nconst KEY_INDEX = 'index';\nconst KEY_EACH = 'each';\nconst EMP_ARR = [];\n// let DEBUG_INC = 0;\n\nexport class ForEachComponent extends Component {\n  constructor(renderFn, item, index) {\n    super(renderFn);\n    const vm_f62d74f4b3 = wrapComponent_f62d74f4b3(this);\n    vm_f62d74f4b3.each = item;\n    vm_f62d74f4b3.index = index;\n    return vm_f62d74f4b3;\n  }\n  [RENDER]() {\n    const renderFn = this[ARG_COMPONENTS][STR_DEFAULT];\n    if (!renderFn) assert_fail();\n    return renderFn(this);\n  }\n}\n\n\nfunction appendRenderEach(item, i, itemRenderFn, roots) {\n  const el = new ForEachComponent(itemRenderFn, item, i);\n  roots.push(el);\n  return el[RENDER]();\n}\n\nfunction assert_vm(item, i) {\n  if (item !== null && isObject(item) && !(VM_PARENTS in item)) {\n    throw new Error(`<for>: array item [${i}] must be ViewModel.`);\n  }\n}\n\nfunction prepare_key(item, i, keyMap, keyName) {\n  const key = keyName === KEY_EACH ? item : keyName(item);\n  if (keyMap.has(key)) {\n    console.error(`<for>: array item [${i}] and [${keyMap.get(key)}] both have key '${key}', dulplicated key may cause update error.`);\n  }\n  keyMap.set(key, i);\n  return key;\n}\nfunction renderItems(items, itemRenderFn, roots, keys, keyName) {\n  const result = [];\n  const tmpKeyMap = new Map();\n  items.forEach((item, i) => {\n    assert_vm(item, i);\n    if (keyName !== KEY_INDEX) {\n      keys.push(prepare_key(item, i, tmpKeyMap, keyName));  \n    }\n    result.push(...appendRenderEach(item, i, itemRenderFn, roots));\n  });\n  return result;\n}\nfunction loopAppend($parent, el) {\n  el[ROOT_NODES].forEach(node => {\n    if (isComponent(node)) {\n      loopAppend($parent, node);\n    } else {\n      appendChild($parent, node);\n    }\n  });\n}\nexport class ForComponent extends Component {\n  constructor(attrs) {\n    const kn = attrs._key;\n    if (!kn)\n      throw new Error('<for>: require \"_key\" attribute.');\n    if (!kn || !/^(index|each(.[\\w\\d$_]+)*)$/.test(kn)) {\n      throw new Error('<for>: bad \"_key\" attribute value. See https://[todo]');\n    }\n    super(attrs);\n    const vm_f62d74f4b3 = wrapComponent_f62d74f4b3(this);\n    const fn_f62d74f4b3_4 = () => {\n      vm_f62d74f4b3.loop = attrs.loop;\n    };\n    fn_f62d74f4b3_4();\n    attrs[VM_ON_f62d74f4b3]('loop', fn_f62d74f4b3_4);\n    vm_f62d74f4b3[FOR_KEY_NAME] = attrs._key;\n    vm_f62d74f4b3[FOR_LENGTH] = 0;\n    vm_f62d74f4b3[FOR_KEYS] = null;\n    if (kn !== KEY_INDEX && kn !== KEY_EACH) {\n      vm_f62d74f4b3[FOR_KEY_NAME] = new Function(KEY_EACH, `return ${ kn }`);\n    }\n    return vm_f62d74f4b3;\n  }\n  get loop() {\n    return this._l;\n  }\n  set loop(v) {\n    this._l = v;\n    this[UPDATE_IF_NEED]();\n  }\n  [RENDER]() {\n    const roots = this[ROOT_NODES];\n    const itemRenderFn = this[ARG_COMPONENTS] ? this[ARG_COMPONENTS][STR_DEFAULT] : null;\n    if (!itemRenderFn) {\n      roots.push(createComment(STR_EMPTY));\n      return roots;\n    }\n    const items = this.loop;\n    const keyName = this[FOR_KEY_NAME];\n    if (keyName !== KEY_INDEX) this[FOR_KEYS] = [];\n    if (!isArray(items) || items.length === 0) {\n      roots.push(createComment(STR_EMPTY));\n      return roots;\n    }\n    this[FOR_LENGTH] = items.length;\n    return renderItems(items, itemRenderFn, roots, this[FOR_KEYS], keyName);\n  }\n  [UPDATE]() {\n    const itemRenderFn = this[ARG_COMPONENTS] ? this[ARG_COMPONENTS][STR_DEFAULT] : null;\n    if (!itemRenderFn) return;\n\n    const newItems = Array.isArray(this.loop) ? this.loop : EMP_ARR;\n    const roots = this[ROOT_NODES];\n    const nl = newItems.length;\n    const ol = this[FOR_LENGTH];\n    // nothing changed, return directly.\n    if (nl === 0 && ol === 0) return;\n\n    const keyName = this[FOR_KEY_NAME];\n    // if new length equal 0, clear & render comment.\n    if (nl === 0 && ol > 0) {\n      const fd = getFirstHtmlDOM(roots[0]);\n      const $cmt = createComment(STR_EMPTY);\n      insertBefore(getParent(fd), $cmt, fd);\n      for(let i = 0; i < ol; i++) {\n        roots[i][DESTROY]();\n      }\n      roots.length = 1;\n      roots[0] = $cmt;\n      if (keyName !== KEY_INDEX) {\n        this[FOR_KEYS].length = 0;\n      }\n      this[FOR_LENGTH] = 0;\n      return;\n    }\n\n    this[FOR_LENGTH] = nl;\n    const $parent = getParent(ol === 0 ? roots[0] : getFirstHtmlDOM(roots[0]));\n    if (ol === 0) {\n      removeChild($parent, roots[0]);\n      roots.length = 0;\n    }\n\n    if (keyName === KEY_INDEX) {\n      let $f = null;\n      for(let i = 0; i < nl; i++) {\n        if (i < ol) {\n          const el = roots[i];\n          if (newItems[i] !== el.each) {\n            el.each = newItems[i];\n          }\n        } else {\n          if (!$f) $f = createFragment();\n          appendChild($f, ...appendRenderEach(newItems[i], i, itemRenderFn, roots));\n        }\n      }\n      if ($f) {\n        appendChild($parent, $f);\n      }\n      if (nl >= ol) return;\n      for(let i = nl; i < ol; i++) {\n        roots[i][DESTROY]();\n      }\n      roots.splice(nl);\n      return;\n    }\n\n    const oldKeys = this[FOR_KEYS];\n    if (ol === 0) {\n      const rs = renderItems(newItems, itemRenderFn, roots, oldKeys, keyName);\n      appendChild($parent, createFragment(rs));\n      return;\n    }\n\n    const oldKeyMap = new Map();\n    oldKeys.forEach((k, i) => {\n      oldKeyMap.set(k, i);\n    });\n    const newKeys = [];\n    const newKeyMap = new Map();\n    newItems.forEach((item, i) => {\n      assert_vm(item, i);\n      newKeys.push(prepare_key(item, i, newKeyMap, keyName));\n    });\n    \n    let oi = 0;\n    let ni = 0;\n    const newRoots = [];\n    const oldTags = new Uint8Array(ol);\n    while(oi < ol || ni < nl) {\n      while(oi < ol) {\n        if (oldTags[oi] !== 0) {\n          oi++;\n        } else if (newKeyMap.has(oldKeys[oi]) && newKeyMap.get(oldKeys[oi]) >= ni) {\n          break;\n        } else {\n          roots[oi][DESTROY]();\n          oi++;\n        }\n      }\n      if (oi >= ol) {\n        let $f = null;\n        for(; ni < nl; ni++) {\n          const el = new ForEachComponent(itemRenderFn, newItems[ni], ni);\n          if (!$f) $f = createFragment();\n          appendChild($f, ...el[RENDER]());\n          newRoots.push(el);\n        }\n        if ($f) appendChild($parent, $f);\n        break;\n      }\n      const oldKey = oldKeys[oi];\n      let $f = null;\n      while(ni < nl) {\n        const newKey = newKeys[ni];\n        if (newKey === oldKey) break;\n        \n        let reuseEl = null;\n        if (oldKeyMap.has(newKey)) {\n          const oldIdx = oldKeyMap.get(newKey);\n          if (oldIdx > oi && oldTags[oldIdx] === 0) {\n            reuseEl = roots[oldIdx];\n            oldTags[oldIdx] = 1;\n          } \n        }\n        if (!$f) $f = createFragment();\n        if (!reuseEl) {\n          reuseEl = new ForEachComponent(itemRenderFn, newItems[ni], ni);\n          appendChild($f, ...reuseEl[RENDER]());\n        } else {\n          loopAppend($f, reuseEl);\n          if (reuseEl.index !== ni) reuseEl.index = ni;\n          if (reuseEl.each !== newItems[ni]) reuseEl.each = newItems[ni];\n        }\n        newRoots.push(reuseEl);\n        ni++;\n      }\n      if (ni >= nl) {\n        assert_fail('unimpossible?!');\n      }\n      const el = roots[oi];\n      $f && insertBefore($parent, $f, getFirstHtmlDOM(el));\n      if (el.index !== ni) el.index = ni;\n      if (el.each !== newItems[ni]) el.each = newItems[ni];\n      newRoots.push(el);\n      oi++;\n      ni++;\n    }\n    this[ROOT_NODES] = newRoots;\n    this[FOR_KEYS] = newKeys;\n\n  }\n}","import {\n  createTextNode as createTextNode_821a4b3e, createComment as createComment_821a4b3e, createElement as createElement_821a4b3e, createElementWithoutAttrs as createElementWithoutAttrs_821a4b3e, createFragment as createFragment_821a4b3e, appendText as appendText_821a4b3e, appendChild as appendChild_821a4b3e, setText as setText_821a4b3e, setAttribute as setAttribute_821a4b3e, setInputValue as setInputValue_821a4b3e, addEvent as addEvent_821a4b3e\n} from 'jinge/src/dom';\nimport {\n  VM_ON as VM_ON_821a4b3e, VM_NOTIFY as VM_NOTIFY_821a4b3e\n} from 'jinge/src/viewmodel/notify';\nimport {\n  assertRenderResults as assertRenderResults_821a4b3e, SET_REF_NODE as SET_REF_NODE_821a4b3e, CONTEXT as CONTEXT_821a4b3e, NON_ROOT_COMPONENT_NODES as NON_ROOT_COMPONENT_NODES_821a4b3e, ROOT_NODES as ROOT_NODES_821a4b3e, ARG_COMPONENTS as ARG_COMPONENTS_821a4b3e, RENDER as RENDER_821a4b3e\n} from 'jinge/src/core/component';\nimport {\n  wrapViewModel as wrapViewModel_821a4b3e\n} from 'jinge/src/viewmodel/proxy';\nimport {\n  STR_EMPTY as STR_EMPTY_821a4b3e, STR_DEFAULT as STR_DEFAULT_821a4b3e\n} from 'jinge/src/util';\n\nimport {\n  IfComponent as IfComponent_5eb53a52, ForComponent as ForComponent_5eb53a52, SwitchComponent as SwitchComponent_5eb53a52, Component as Component_5eb53a52\n} from 'jinge';\n\nexport default function(component) {\n  const vm_0 = component;\n  return [\n  (() => {\n    const el = createElementWithoutAttrs_821a4b3e(\n      \"h2\",\n      \"jQuery & echarts integration\"\n    );\n    component[ROOT_NODES_821a4b3e].push(el);\n    return el;\n  })(),\n  (() => {\n    const el = createElementWithoutAttrs_821a4b3e(\n      \"p\",\n      (() => {\n        const el = createElement_821a4b3e(\n          \"div\",\n          {\n            class: \"chart-container\"\n          },\n        );\n        vm_0[SET_REF_NODE_821a4b3e]('chart', el, component)\n        return el;\n      })()\n    );\n    component[ROOT_NODES_821a4b3e].push(el);\n    return el;\n  })(),\n  (() => {\n    const el = createElementWithoutAttrs_821a4b3e(\n      \"p\",\n      (() => {\n        const el = createElementWithoutAttrs_821a4b3e(\n          \"button\",\n          \"Render Chart\"\n        );\n        vm_0[SET_REF_NODE_821a4b3e]('btn', el, component)\n        return el;\n      })()\n    );\n    component[ROOT_NODES_821a4b3e].push(el);\n    return el;\n  })()\n  ];\n}","import {\n  RENDER_TO_DOM,\n  isComponent\n} from './component';\nimport { assert_fail } from '../util';\n\nexport function bootstrap(Component, dom) {\n  if (dom === document.body) {\n    throw new Error('bootstrap dom cannot be document.body');\n  }\n  const bootComponent = new Component();\n  if (!isComponent(bootComponent)) assert_fail();\n  bootComponent[RENDER_TO_DOM](dom);\n}\n","\nimport {\n  VM_ON as VM_ON_f62d74f4b3\n} from 'jinge/src/viewmodel/notify';\nimport {\n  wrapComponent as wrapComponent_f62d74f4b3\n} from 'jinge/src/viewmodel/proxy';\n\nimport {\n  Component,\n  bootstrap,\n  VM\n} from 'jinge';\nimport $ from 'jquery';\nimport echarts from 'echarts';\nimport _tpl from './app.html';\n\nlet AUTO_INC = 6;\n\nclass App extends Component {\n  static get template() {\n    return _tpl;\n  }\n  constructor(args) {\n    super(args);\n    const vm_f62d74f4b3 = wrapComponent_f62d74f4b3(this);\n    vm_f62d74f4b3.btnHandler = vm_f62d74f4b3.onButtonClick.bind(this);\n    vm_f62d74f4b3.chart = null;\n    return vm_f62d74f4b3;\n  }\n  afterRender() {\n    $(this.getChild('btn')).on('click', this.btnHandler);\n  }\n  beforeDestroy() {\n    $(this.getChild('btn')).off('click', this.btnHandler);\n    this.chart && this.chart.dispose();\n  }\n  onButtonClick($evt) {\n    console.log($evt);\n    if (!this.chart) {\n      this.chart = echarts.init(this.getChild('chart'));\n    }\n    // use configuration item and data specified to show chart\n    this.chart.setOption({\n      title: {\n        text: 'ECharts entry example'\n      },\n      tooltip: {},\n      legend: {\n        data: ['Sales']\n      },\n      xAxis: {\n        data: [\"shirt\", \"cardign\", \"chiffon shirt\", \"pants\", \"heels\", \"socks\"]\n      },\n      yAxis: {},\n      series: [{\n        name: 'Sales',\n        type: 'bar',\n        data: [5, 20, 36, 10, 10, 20]\n      }]\n    });\n  }\n}\n\nbootstrap(App, document.getElementById('root-app'));\n"],"sourceRoot":""}